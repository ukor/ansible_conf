# See https://www.nginx.com/blog/rate-limiting-nginx/
limit_req_zone $binary_remote_addr zone=lb_limit:10m rate=10r/s;


# See https://docs.nginx.com/nginx/admin-guide/load-balancer/http-load-balancer/
upstream prd_backend {
  least_conn;
  server 123.45.6.70:7200;
  # TODO: request will only be moved to google cloud 
  # when the servers are down
  # server link-to-google-cloud backup;
}

upstream stg_backend {
  least_conn;
  server 123.45.67.80:7200;
  # TODO: request will only be moved to google cloud 
  # when the servers are down
  # server link-to-google-cloud backup;

}

# Drop all connection without a host header
# https://nginx.org/en/docs/http/request_processing.html#how_to_prevent_undefined_server_names
server {
  listen 80;
  server_name "";
  return 444;
}

## production api api.unizonn.com
server {
    listen 80;
    listen [::]:80;
    server_name api.unizonn.com;
	  default_type application/json;

    # drop all connection ending with .php
    # https://nginx.org/en/docs/http/request_processing.html#how_to_prevent_undefined_server_names
    location ~* \.php$ {
      return 444;
    }
    
    location / {
      # force HTTPS
      # return 301 https://$server_name$request_uri;
      # Force user to call HTTPS
      return 403 '{status:"forbidden", "code":"403", "message": "Use HTTPS protocol"}';
    }

    # letsencrypt verification
    location ^~ /.well-known {
      root /var/www/html;
    }
}

server {
    listen 443 ssl;
    listen [::]:443;
    server_name api.unizonn.com;
    
    access_log /var/log/nginx/access.log upstreamlog;

    # drop all connection ending with .php
    # https://nginx.org/en/docs/http/request_processing.html#how_to_prevent_undefined_server_names
    location ~* \.php$ {
      return 444;
    }


    # Match any url that begins with any of this "/_/" or "/api/" or "/auth/"
    location ~* (/_/|/auth/|/api/)(.*) {
      limit_req zone=lb_limit burst=20 delay=8;

      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_set_header X-Real-IP $remote_addr;
      proxy_set_header Host $http_host;
      proxy_set_header X-NginX-Proxy true;
      proxy_http_version 1.1;
      proxy_set_header Upgrade $http_upgrade;
      proxy_set_header Connection "upgrade";
      proxy_max_temp_file_size 0;
      proxy_read_timeout 300s;
      proxy_set_header X-Forwarded-Proto $scheme;
		  client_max_body_size 500M;

      if ($request_method = 'OPTIONS') {
        add_header 'Access-Control-Allow-Origin' "$http_origin" always;
        add_header 'Access-Control-Allow-Methods' 'GET, POST, PATCH, PUT, DELETE, OPTIONS' always;
        add_header 'Access-Control-Allow-Headers' 'Content-Type, Accept, Authorization' always;
        add_header 'Access-Control-Allow-Credentials' 'true' always;

        add_header 'Access-Control-Max-Age' 1728000;
        add_header 'Content-Type' 'text/plain charset=UTF-8';
        add_header 'Content-Length' 0;
        
      }

      proxy_pass http://prd_backend/$2$is_args$args;

    }
    
    
    location ~* (^/v\d+)(.*) {
      limit_req zone=lb_limit burst=20 delay=8;

      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_set_header X-Real-IP $remote_addr;
      proxy_set_header Host $http_host;
      proxy_set_header X-NginX-Proxy true;
      proxy_http_version 1.1;
      proxy_set_header Upgrade $http_upgrade;
      proxy_set_header Connection "upgrade";
      proxy_max_temp_file_size 0;
      proxy_read_timeout 300s;
      proxy_set_header X-Forwarded-Proto $scheme;
		  client_max_body_size 500M;

      if ($request_method = 'OPTIONS') {
        add_header 'Access-Control-Allow-Origin' "$http_origin" always;
        add_header 'Access-Control-Allow-Methods' 'GET, POST, PATCH, PUT, DELETE, OPTIONS' always;
        add_header 'Access-Control-Allow-Headers' 'Content-Type, Accept, Authorization' always;
        add_header 'Access-Control-Allow-Credentials' 'true' always;

        add_header 'Access-Control-Max-Age' 1728000;
        add_header 'Content-Type' 'text/plain charset=UTF-8';
        add_header 'Content-Length' 0;
        
      }

      proxy_pass http://prd_backend$1$2$is_args$args;
    }

    ssl_certificate /etc/letsencrypt/live/api.unizonn.com/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/api.unizonn.com/privkey.pem;
    include /etc/letsencrypt/ssl-options.conf;
    ssl_dhparam /etc/letsencrypt/dhparams.pem;

}

## staging api api-staging.unizonn.com
server {
    listen 80;
    listen [::]:80;
    server_name api-staging.unizonn.com;

	  default_type application/json;
    
    # drop all connection ending with .php
    # https://nginx.org/en/docs/http/request_processing.html#how_to_prevent_undefined_server_names
    location ~* \.php$ {
      return 444;
    }


    location / {
      # force HTTPS
      # return 301 https://$server_name$request_uri;
      # Force user to call HTTPS
      return 403 '{status:"forbidden", "code":"403", "message": "Use HTTPS protocol"}';
    }

    # letsencrypt verification
    location ^~ /.well-known {
      root /var/www/html;
    }
}

server {
    listen 443 ssl;
    listen [::]:443;
    server_name api-staging.unizonn.com;
  
    access_log /var/log/nginx/access.log upstreamlog;

    # drop all connection ending with .php
    # https://nginx.org/en/docs/http/request_processing.html#how_to_prevent_undefined_server_names
    location ~* \.php$ {
      return 444;
    }

    
    # Match any url that begins with any of this "/_/" or "/api/" or "/auth/"
    location ~* (/_/|/api/|/auth/)(.*) {
      limit_req zone=lb_limit burst=20 delay=8;

      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_set_header X-Real-IP $remote_addr;
      proxy_set_header Host $http_host;
      proxy_set_header X-NginX-Proxy true;
      proxy_http_version 1.1;
      proxy_set_header Upgrade $http_upgrade;
      proxy_set_header Connection "upgrade";
      proxy_max_temp_file_size 0;
      proxy_read_timeout 300s;
      proxy_set_header X-Forwarded-Proto $scheme;
		  client_max_body_size 500M;

      
      if ($request_method = 'OPTIONS') {
        add_header 'Access-Control-Allow-Origin' "$http_origin" always;
        add_header 'Access-Control-Allow-Methods' 'GET, POST, PATCH, PUT, DELETE, OPTIONS' always;
        add_header 'Access-Control-Allow-Headers' 'Content-Type, Accept, Authorization' always;
        add_header 'Access-Control-Allow-Credentials' 'true' always;

        add_header 'Access-Control-Max-Age' 1728000;
        add_header 'Content-Type' 'text/plain charset=UTF-8';
        add_header 'Content-Length' 0;
        
      }

      proxy_pass http://stg_backend/$2$is_args$args;

    }
    

    location ~ (^/v\d+)(.*) {
      limit_req zone=lb_limit burst=20 delay=8;

      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_set_header X-Real-IP $remote_addr;
      proxy_set_header Host $http_host;
      proxy_set_header X-NginX-Proxy true;
      proxy_http_version 1.1;
      proxy_set_header Upgrade $http_upgrade;
      proxy_set_header Connection "upgrade";
      proxy_max_temp_file_size 0;
      proxy_read_timeout 300s;
      proxy_set_header X-Forwarded-Proto $scheme;
		  client_max_body_size 500M;

      if ($request_method = 'OPTIONS') {
        add_header 'Access-Control-Allow-Origin' "$http_origin" always;
        add_header 'Access-Control-Allow-Methods' 'GET, POST, PATCH, PUT, DELETE, OPTIONS' always;
        add_header 'Access-Control-Allow-Headers' 'Content-Type, Accept, Authorization' always;
        add_header 'Access-Control-Allow-Credentials' 'true' always;

        add_header 'Access-Control-Max-Age' 1728000;
        add_header 'Content-Type' 'text/plain charset=UTF-8';
        add_header 'Content-Length' 0;
        
      }

      proxy_pass http://stg_backend$1$2$is_args$args;
    }

    ssl_certificate /etc/letsencrypt/live/api-staging.unizonn.com/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/api-staging.unizonn.com/privkey.pem;
    include /etc/letsencrypt/ssl-options.conf;
    ssl_dhparam /etc/letsencrypt/dhparams.pem;
}

