#
#

upstream rProduction {
  server 127.0.0.1:3310;
}

upstream rStaging {
  server 127.0.0.1:3110;
}

upstream rDevelopment {
  server 127.0.0.1:3010;
}

upstream cProduction {
  server 127.0.0.1:3080;
}

upstream cStaging {
  server 127.0.0.1:3283;
}

upstream cDevelopment {
  server 127.0.0.1:3183;
}

upstream rWebClient {
  server 127.0.0.1:6583;
}

#
## Drop all connection without a host header
## https://nginx.org/en/docs/http/request_processing.html#how_to_prevent_undefined_server_names
#
server {
  listen 80;
  server_name "";
  return 444;
}

server {
  
    listen 80;
    listen [::]:80;
    server_name ukor.com.ng;
	  default_type application/json;

    # drop all connection ending with .php
    # https://nginx.org/en/docs/http/request_processing.html#how_to_prevent_undefined_server_names
    location ~* \.php$ {
      return 444;
    }
   
    # letsencrypt verification
    location ^~ /.well-known {
      root /var/www/html;
    }


    location / {
      # force HTTPS
      return 301 https://$server_name$request_uri;

    }
}

#
## production 
#
server {
    listen 80;
    listen [::]:80;
    server_name api-prd.ukor.com.ng;
	  default_type application/json;

    # drop all connection ending with .php
    # https://nginx.org/en/docs/http/request_processing.html#how_to_prevent_undefined_server_names
    location ~* \.php$ {
      return 444;
    }
   
    # letsencrypt verification
    location ^~ /.well-known {
      root /var/www/html;
    }


    location / {
      # force HTTPS
      # return 301 https://$server_name$request_uri;
      # Force user to call HTTPS
      return 403 '{status:"forbidden", "code":"403", "message": "Use HTTPS protocol"}';
    }

  }

#
## staging API 
#
server {
    listen 80;
    listen [::]:80;
    server_name api-stg.ukor.com.ng;

    default_type application/json;
    
    # drop all connection ending with .php
    # https://nginx.org/en/docs/http/request_processing.html#how_to_prevent_undefined_server_names
    location ~* \.php$ {
      return 444;
    }

    # letsencrypt verification
    location ^~ /.well-known {
      root /var/www/html;
    }


    location / {
      # force HTTPS
      # return 301 https://$server_name$request_uri;
      # Force user to call HTTPS
      return 403 '{status:"forbidden", "code":"403", "message": "Use HTTPS protocol"}';
    }

  }


#
## Development API 
#
server {
    listen 80;
    listen [::]:80;
    server_name api-dev.ukor.com.ng;

	  default_type application/json;
    
    # drop all connection ending with .php
    # https://nginx.org/en/docs/http/request_processing.html#how_to_prevent_undefined_server_names
    location ~* \.php$ {
      return 444;
    }

    # letsencrypt verification
    location ^~ /.well-known {
      root /var/www/html;
    }


    location / {
      # force HTTPS
      # return 301 https://$server_name$request_uri;
      # Force user to call HTTPS
      return 403 '{status:"forbidden", "code":"403", "message": "Use HTTPS protocol"}';
    }

  }

  #
## production for content api 
#
server {
    listen 80;
    listen [::]:80;
    server_name content-api-prd.ukor.com.ng;
	  default_type application/json;

    # drop all connection ending with .php
    # https://nginx.org/en/docs/http/request_processing.html#how_to_prevent_undefined_server_names
    location ~* \.php$ {
      return 444;
    }
   
    # letsencrypt verification
    location ^~ /.well-known {
      root /var/www/html;
    }


    location / {
      # force HTTPS
      # return 301 https://$server_name$request_uri;
      # Force user to call HTTPS
      return 403 '{status:"forbidden", "code":"403", "message": "Use HTTPS protocol"}';
    }

  }

#
## staging API 
#
server {
    listen 80;
    listen [::]:80;
    server_name content-api-stg.ukor.com.ng;

    default_type application/json;
    
    # drop all connection ending with .php
    # https://nginx.org/en/docs/http/request_processing.html#how_to_prevent_undefined_server_names
    location ~* \.php$ {
      return 444;
    }

    # letsencrypt verification
    location ^~ /.well-known {
      root /var/www/html;
    }


    location / {
      # force HTTPS
      # return 301 https://$server_name$request_uri;
      # Force user to call HTTPS
      return 403 '{status:"forbidden", "code":"403", "message": "Use HTTPS protocol"}';
    }

  }


#
## Development API 
#
server {
    listen 80;
    listen [::]:80;
    server_name content-api-dev.ukor.com.ng;

	  default_type application/json;
    
    # drop all connection ending with .php
    # https://nginx.org/en/docs/http/request_processing.html#how_to_prevent_undefined_server_names
    location ~* \.php$ {
      return 444;
    }

    # letsencrypt verification
    location ^~ /.well-known {
      root /var/www/html;
    }


    location / {
      # force HTTPS
      # return 301 https://$server_name$request_uri;
      # Force user to call HTTPS
      return 403 '{status:"forbidden", "code":"403", "message": "Use HTTPS protocol"}';
    }

  }


  include /etc/nginx/snippets/reverse-proxy-443.nginx.conf;

